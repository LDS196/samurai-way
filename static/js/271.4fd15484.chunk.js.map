{"version":3,"file":"static/js/271.4fd15484.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userInfo\":\"ChatPage_userInfo__UU9zy\"};","import React, {memo, useEffect, useRef, useState} from \"react\";\r\nimport {Avatar, Button} from \"antd\";\r\nimport style from \"../Chat/ChatPage.module.css\";\r\nimport {ChatMessageType} from \"components/api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"redux/chat-reducer\";\r\nimport {StateType} from \"redux/redux-store\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: StateType) => state.chat.status)\r\n    const isAuth = useSelector((state: StateType) => state.auth.isAuth)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    if (!isAuth) return <Navigate to={'/login'}/>\r\n    return <div>\r\n        {status === 'error'\r\n            ? <div>Some error</div>\r\n            : <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        }\r\n\r\n    </div>\r\n}\r\n\r\n\r\nconst Messages = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    const messages = useSelector((state: StateType) => state.chat.messages)\r\n\r\n    const [autoScroll, setAutoScroll] = useState(true)\r\n\r\n    const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            setAutoScroll(true)\r\n        } else {\r\n            setAutoScroll(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n\r\n    }, [messages])\r\n\r\n    return <div style={{height: '600px', overflow: 'auto'}} onScroll={onScrollHandler}>\r\n\r\n        {!!messages && messages.map((m) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n\r\n};\r\n\r\nconst AddMessageForm = () => {\r\n    const status = useSelector((state: StateType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n    const [message, setMessage] = useState('')\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextArea size={\"small\"} placeholder=\"Message\"\r\n                          style={{marginTop: '10px', maxWidth: '400px'}}\r\n                          onChange={(e) => setMessage(e.currentTarget.value)}\r\n                          value={message}\r\n                />\r\n            </div>\r\n            <div style={{marginTop: '10px'}}>\r\n\r\n                <Button type=\"primary\" disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <div className={style.userInfo}>\r\n                <Avatar src={message.photo}/>\r\n                <span>UserID: {message.userId}</span>\r\n                <span>UserName: {message.userName}</span>\r\n            </div>\r\n            <p>{message.message}</p>\r\n            <hr/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ChatPage;\r\n"],"names":["ChatPage","_jsx","children","Chat","dispatch","useDispatch","status","useSelector","state","chat","isAuth","auth","useEffect","startMessagesListening","stopMessagesListening","_jsxs","_Fragment","Messages","AddMessageForm","Navigate","to","messagesAnchorRef","useRef","messages","_useState","useState","_useState2","_slicedToArray","autoScroll","setAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflow","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","_useState3","_useState4","setMessage","TextArea","size","placeholder","marginTop","maxWidth","onChange","value","Button","type","disabled","onClick","sendMessage","memo","_ref","className","Avatar","src","photo","userId","userName"],"sourceRoot":""}