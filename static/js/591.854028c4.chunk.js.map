{"version":3,"file":"static/js/591.854028c4.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAoE,gCAApE,EAAwH,mC,UCAxH,EAAgC,mCAAhC,EAA4E,4BAA5E,EAAwH,mC,SCgBxH,EAXoB,SAACA,GACjB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAC5BH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EACJG,UAAW,SAAAK,GAAU,OAAAA,EAARC,SAAyBL,EAAkB,IAAMA,EAAWA,CAAe,EAACC,SAChGN,EAAMW,QAGpB,ECdA,EAAmC,kCCUnC,EANgB,SAACX,GACb,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAmBC,SAAEN,EAAMY,SAEnD,E,uCCGMC,GAAcC,EAAAA,EAAAA,GAAiB,IAgBrC,GAAeC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,mBAA9C,EAdsF,SAAChB,GACnF,OACIG,EAAAA,EAAAA,KAAA,QAAMc,SAAUjB,EAAMkB,aAAaZ,UAC/Ba,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACIH,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EAAUX,KAAM,iBAC3BY,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUZ,MAC5BV,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eAK5B,ICgBA,EA9BgB,SAACN,GACb,IAAI0B,EAAQ1B,EAAM2B,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAC1C5B,EAAAA,EAAAA,KAAC6B,EAAW,CAAmBrB,KAAMoB,EAAOpB,KAC/BT,GAAI6B,EAAO7B,IADN6B,EAAOpB,KACI,IAE7BsB,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAlB,GAAO,OAC7CT,EAAAA,EAAAA,KAACgC,EAAO,CAAuBvB,QAASA,EAAQA,QAASV,GAAIU,EAAQV,IAAvDU,EAAQA,QAAoD,IAM9E,OACIO,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACIa,EAAAA,EAAAA,MAAA,OAAKf,UAAWC,EAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAiBC,SAC5BsB,KAELzB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBC,SAC/B2B,QAGT9B,EAAAA,EAAAA,KAACiC,EAAc,CAACnB,SAbF,SAACoB,GACnBrC,EAAMsC,UAAUD,EAAOE,eAC3B,MAgBJ,E,6BC5BIC,EAAkB,SAACd,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAG3B,EACIc,EAAqB,SAACC,GACtB,MAAO,CACHJ,UAAW,SAACK,GACRD,GAASE,EAAAA,EAAAA,GAAiBD,GAC9B,EAER,GACAE,EAAAA,EAAAA,KACIC,EAAAA,EAAAA,IAAQN,EAAiBC,GACzBM,EAAAA,EAFJF,CAGEG,GAMF,OAAeH,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,IAAQN,EAAiBC,GAAqBM,EAAAA,EAA/E,CAAiGC,E,kICzB7FC,EAA6B,SAACvB,GAAgB,MAAM,CACpDwB,OAAQxB,EAAMyB,KAAKD,OACtB,EAEM,SAASH,EAAoBK,GAOhC,OAAON,EAAAA,EAAAA,IAAQG,EAARH,EALkE,SAAC9C,GACtE,IAAKkD,EAAwBlD,EAAxBkD,OAAWG,GAASC,EAAAA,EAAAA,GAAItD,EAAKuD,GAClC,OAAKL,GACE/C,EAAAA,EAAAA,KAACiD,GAASI,EAAAA,EAAAA,GAAA,GAAIH,KADDlD,EAAAA,EAAAA,KAACsD,EAAAA,GAAQ,CAACjD,GAAI,UAEtC,GAEJ,C","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogsItem/DialogsItem.module.css?e982","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/DialogsMessage/Message.module.css","components/Dialogs/DialogsMessage/Message.tsx","components/Dialogs/DialogsMessage/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__cm1+b\",\"dialogs__items\":\"Dialogs_dialogs__items__BA4TP\",\"dialogs__messages\":\"Dialogs_dialogs__messages__aXy5n\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__item\":\"DialogsItem_dialogs__item__LeXFU\",\"active\":\"DialogsItem_active__3CqHZ\",\"dialogs__link\":\"DialogsItem_dialogs__link__WUG4s\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogsItem.module.css';\r\nimport {DialogUserType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst DialogsItem = (props: DialogUserType) => {\r\n    let path = '/Dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialogs__item}>\r\n            <NavLink to={path}\r\n                     className={({isActive}) => isActive ? s.dialogs__link + ' ' + s.active : s.dialogs__link}\r\n            >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__message\":\"Message_dialogs__message__nSAte\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {DialogMessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst Message = (props: DialogMessageType) => {\r\n    return (\r\n        <div className={s.dialogs__message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\n\r\nexport type FormDataType = {\r\n    NewMessageBody:string\r\n}\r\ntype PropsType={\r\n\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType,PropsType>&PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'NewMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength50]}/>\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<FormDataType>({form: ' AddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./DialogsMessage/Message\";\r\n\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm, {FormDataType} from \"./DialogsMessage/AddMessageForm\";\r\n\r\nexport type DialogsType = {\r\n    addDialog: (value: string) => void\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements = state.dialogs.map(dialog =>\r\n        <DialogsItem key={dialog.name} name={dialog.name}\r\n                     id={dialog.id}/>);\r\n\r\n    let messagesElements = state.messages.map(message =>\r\n        <Message key={message.message} message={message.message} id={message.id}/>)\r\n\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.addDialog(values.NewMessageBody)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogs__items}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.dialogs__messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\nimport {\r\n    ActionDialogsType,\r\n    addDialogCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (a: ActionDialogsType) => void) => {\r\n    return {\r\n        addDialog: (newMessageBody:string) => {\r\n            dispatch(addDialogCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\ncompose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose<React.FC>(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)","import React, {Component, ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {StateType} from \"redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\nlet mapStateToPropsForRedirect = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent: React.FC<MapStateToProps & DispatchPropsType> = (props)=> {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component{...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n};\r\n\r\n"],"names":["props","path","id","_jsx","className","s","children","NavLink","to","_ref","isActive","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","_jsxs","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogsElements","dialogs","map","dialog","DialogsItem","messagesElements","messages","Message","AddMessageForm","values","addDialog","NewMessageBody","mapStateToProps","mapDispatchToProps","dispatch","newMessageBody","addDialogCreator","compose","connect","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","_objectWithoutProperties","_excluded","_objectSpread","Navigate"],"sourceRoot":""}